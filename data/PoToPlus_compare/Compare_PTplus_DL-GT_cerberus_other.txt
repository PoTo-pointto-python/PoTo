0: ('/cerberus/errors.py', 'module_initializer', 'DOCUMENT_MISSING') 6 (DL subset PT)
  PT: ['ErrorDefinition', 'str']
  DL: ['ErrorDefinition']
1: ('/cerberus/errors.py', 'module_initializer', 'DOCUMENT_FORMAT') 6 (DL subset PT)
  PT: ['ErrorDefinition', 'str']
  DL: ['ErrorDefinition']
2: ('/cerberus/base.py', 'module_initializer', '_ellipsis') 7 (etc)
  PT: ['Ellipsis']
  DL: ['dict']
3: ('/cerberus/base.py', 'module_initializer', 'schema_registry') 7 (etc)
  PT: ['SchemaRegistry']
  DL: ['tuple']
4: ('/cerberus/base.py', 'module_initializer', 'rules_set_registry') 7 (etc)
  PT: ['RulesSetRegistry']
  DL: ['tuple']
5: ('/cerberus/base.py', 'module_initializer', 'TypeDefinition') 7 (etc)
  PT: ['pt_engine.utils.base.TypeDefinition']
  DL: ['typing.NamedTuple']
6: ('/cerberus/base.py', 'SchemaRegistry_class_initializer', '_normalize_value') 3 (PT Empty)
  PT: []
  DL: ['staticmethod']
7: ('/cerberus/base.py', 'RulesSetRegistry_class_initializer', '_normalize_value') 3 (PT Empty)
  PT: []
  DL: ['staticmethod']
8: ('/cerberus/base.py', 'UnconcernedValidator_class_initializer', '_validate_allow_unknown') 7 (etc)
  PT: ['meta_func']
  DL: ['dummy_for_rule_validation']
9: ('/cerberus/base.py', 'UnconcernedValidator_class_initializer', '_validate_meta') 7 (etc)
  PT: ['meta_func']
  DL: ['dummy_for_rule_validation']
10: ('/cerberus/base.py', 'UnconcernedValidator_class_initializer', '_validate_required') 7 (etc)
  PT: ['meta_func']
  DL: ['dummy_for_rule_validation']
11: ('/cerberus/base.py', 'UnconcernedValidator_class_initializer', '_validate_require_all') 7 (etc)
  PT: ['meta_func']
  DL: ['dummy_for_rule_validation']
12: ('/cerberus/typing.py', 'module_initializer', 'DocumentPath') 7 (etc)
  PT: ['typing.Tuple[typing.Hashable, ...]']
  DL: ['dict']
13: ('/cerberus/typing.py', 'module_initializer', 'ErrorHandlerConfig') 7 (etc)
  PT: ["typing.Union[ForwardRef('BaseErrorHandler'), typing.Type[ForwardRef('BaseErrorHandler')], typing.Tuple[typing.Type[ForwardRef('BaseErrorHandler')], typing.Mapping[str, typing.Any]]]"]
  DL: ['dict']
14: ('/cerberus/typing.py', 'module_initializer', 'NoneType') 7 (etc)
  PT: ['NoneType']
  DL: ['type']
15: ('/cerberus/typing.py', 'module_initializer', 'Schema') 6 (DL subset PT)
  PT: ["typing.Union[ForwardRef('ValidatedSchema'), typing.Mapping[typing.Hashable, typing.Mapping[str, typing.Any]]]"]
  DL: ['dict']
16: ('/cerberus/typing.py', 'module_initializer', 'AllowUnknown') 6 (DL subset PT)
  PT: ['typing.Union[bool, typing.Mapping[str, typing.Any]]']
  DL: ['dict']
17: ('/cerberus/errors.py', '__init__', 'parent_node') 6 (DL subset PT)
  PT: ['DocumentErrorTree', 'ErrorTree', 'ErrorTreeNode', 'SchemaErrorTree', "'ErrorTreeNode'"]
  DL: ['ErrorTreeNode']
18: ('/cerberus/errors.py', '__init__', 'document_path') 6 (DL subset PT)
  PT: ['<tempfile._TemporaryFileWrapper object at 0x7f79d6777550>', 'None', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'DocumentPath']
  DL: ['cerberus.typing.DocumentPath']
19: ('/cerberus/errors.py', '__init__', 'schema_path') 6 (DL subset PT)
  PT: ['None', 'list', 'str', 'tuple', 'DocumentPath']
  DL: ['cerberus.typing.DocumentPath']
20: ('/cerberus/errors.py', '__init__', 'rule') 8 (Partial match)
  PT: ['None', 'str', 'Optional[str]']
  DL: ['dict', 'str']
21: ('/cerberus/errors.py', '__init__', 'constraint') 6 (DL subset PT)
  PT: ['None', 'dict', 'frozenset()', "frozenset({'keysrules'})", 'list', 'str', 'tuple', 'Any']
  DL: ['typing.Any']
22: ('/cerberus/errors.py', '__init__', 'value') 6 (DL subset PT)
  PT: ['None', 'bool', 'Any']
  DL: ['typing.Any']
23: ('/cerberus/errors.py', '__init__', 'info') 6 (DL subset PT)
  PT: ['dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'Any']
  DL: ['typing.Any']
24: ('/cerberus/errors.py', 'add', 'error') 8 (Partial match)
  PT: ['ValidationError', 'bool', 'dict', 'frozenset()', 'list', 'tuple']
  DL: ['ValidationError', 'copy.deepcopy']
25: ('/cerberus/errors.py', 'add', 'key') 3 (PT Empty)
  PT: []
  DL: ['dict']
26: ('/cerberus/errors.py', 'add', 'node') 3 (PT Empty)
  PT: []
  DL: ['typing.cast']
27: ('/setup.py', 'module_initializer', 'LONG_DESCRIPTION') 3 (PT Empty)
  PT: []
  DL: ['str']
28: ('/docs/conf.py', 'module_initializer', 'version') 7 (etc)
  PT: ['str']
  DL: ['dict']
29: ('/docs/includes/generate.py', 'module_initializer', 'errors_module') 3 (PT Empty)
  PT: []
  DL: ['load_module_members']
30: ('/docs/includes/generate.py', 'module_initializer', 'error_type') 3 (PT Empty)
  PT: []
  DL: ['dict']
31: ('/docs/includes/generate.py', 'module_initializer', 'validator_module') 3 (PT Empty)
  PT: []
  DL: ['load_module_members']
32: ('/docs/includes/generate.py', 'module_initializer', 'validator') 3 (PT Empty)
  PT: []
  DL: ['dict']
33: ('/docs/includes/generate.py', 'module_initializer', 'schema_validation_schema') 3 (PT Empty)
  PT: []
  DL: ['pprint.pformat']
34: ('/cerberus/base.py', 'normalize_rulesset', 'rules') 8 (Partial match)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'allow_unknown'})", "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'itemsrules'})", "frozenset({'keysrules'})", "frozenset({'required', 'dependencies'})", "frozenset({'required'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'RulesSet']
  DL: ['cerberus.typing.RulesSet', 'dict']
35: ('/cerberus/base.py', 'normalize_rulesset', '_hash') 7 (etc)
  PT: ['int']
  DL: ['cerberus.utils.schema_hash']
36: ('/cerberus/base.py', 'normalize_rulesset', 'constraint') 6 (DL subset PT)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'allow_unknown'})", "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'itemsrules'})", "frozenset({'keysrules'})", "frozenset({'required', 'dependencies'})", "frozenset({'required'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple']
  DL: ['dict']
37: ('/cerberus/utils.py', 'schema_hash', 'schema') 6 (DL subset PT)
  PT: ["ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, None))", "ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, None)", 'None', 'bool', 'dict', 'frozenset()', "frozenset({'allow_unknown'})", "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'itemsrules'})", "frozenset({'keysrules'})", "frozenset({'required', 'dependencies'})", "frozenset({'required'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'Mapping']
  DL: ['typing.Mapping']
38: ('/cerberus/base.py', '_expand_generic_type_aliases', 'rules') 6 (DL subset PT)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'allow_unknown'})", "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'itemsrules'})", "frozenset({'keysrules'})", "frozenset({'required', 'dependencies'})", "frozenset({'required'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'Dict[str, Any]']
  DL: ['dict']
39: ('/cerberus/base.py', '_expand_generic_type_aliases', 'origin') 7 (etc)
  PT: ['None', 'typing.Union']
  DL: ['cerberus.platform.get_type_origin']
40: ('/cerberus/base.py', '_expand_generic_type_aliases', 'args') 7 (etc)
  PT: ['tuple']
  DL: ['cerberus.platform.get_type_args']
41: ('/cerberus/base.py', '_expand_composed_of_rules', 'rules') 6 (DL subset PT)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'allow_unknown'})", "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'itemsrules'})", "frozenset({'keysrules'})", "frozenset({'required', 'dependencies'})", "frozenset({'required'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'Dict[str, Any]']
  DL: ['dict']
42: ('/cerberus/base.py', '_normalize_contained_rulessets', 'rules') 6 (DL subset PT)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'allow_unknown'})", "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'itemsrules'})", "frozenset({'keysrules'})", "frozenset({'required', 'dependencies'})", "frozenset({'required'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'Dict[str, Any]']
  DL: ['dict']
43: ('/cerberus/utils.py', 'mapping_to_frozenset', 'schema') 6 (DL subset PT)
  PT: ["ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, None))", "ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, None)", 'None', 'bool', 'dict', 'frozenset()', "frozenset({'allow_unknown'})", "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'itemsrules'})", "frozenset({'keysrules'})", "frozenset({'required', 'dependencies'})", "frozenset({'required'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'Mapping']
  DL: ['typing.Mapping']
44: ('/cerberus/utils.py', 'mapping_to_frozenset', 'value') 6 (DL subset PT)
  PT: ['bool', 'dict', 'list']
  DL: ['list']
45: ('/cerberus/base.py', 'normalize_schema', 'schema') 6 (DL subset PT)
  PT: ['None', 'bool', 'dict', 'frozenset()', "frozenset({'allow_unknown'})", "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'itemsrules'})", "frozenset({'keysrules'})", "frozenset({'required', 'dependencies'})", "frozenset({'required'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'Schema']
  DL: ['cerberus.typing.Schema']
46: ('/cerberus/base.py', '__init__', 'definitions') 7 (etc)
  PT: ['tuple', 'Union[RegistryItems, Iterable[Tuple[str, RegistryItem]]]']
  DL: ['dict']
47: ('/cerberus/base.py', 'extend', 'definitions') 7 (etc)
  PT: ['tuple', 'Union[RegistryItems, Iterable[Tuple[str, RegistryItem]]]']
  DL: ['dict']
48: ('/cerberus/base.py', '__init__', 'schema') 6 (DL subset PT)
  PT: ['None', 'dict', 'Schema']
  DL: ['cerberus.typing.Schema']
49: ('/cerberus/errors.py', '__init__', 'errors') 7 (etc)
  PT: ['tuple', 'Iterable[ValidationError]']
  DL: ['dict']
50: ('/cerberus/base.py', '__init_error_handler', 'config') 6 (DL subset PT)
  PT: ['BasicErrorHandler', 'ErrorHandlerConfig']
  DL: ['cerberus.typing.ErrorHandlerConfig']
51: ('/cerberus/base.py', '__init_error_handler', 'error_handler') 7 (etc)
  PT: ['BasicErrorHandler']
  DL: ['config', 'tuple']
52: ('/cerberus/base.py', '__init_error_handler', 'eh_config') 7 (etc)
  PT: ['dict']
  DL: ['config', 'tuple']
53: ('/cerberus/errors.py', '__init__', 'tree') 6 (DL subset PT)
  PT: ['None', 'dict', 'Dict']
  DL: ['typing.Dict']
54: ('/cerberus/schema.py', '__init__', 'schema') 7 (etc)
  PT: ['None', 'dict']
  DL: ['cerberus.base.normalize_schema']
55: ('/cerberus/schema.py', 'validate', 'schema') 6 (DL subset PT)
  PT: ["ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, None))", "ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, None)", 'None', 'dict']
  DL: ['dict']
56: ('/cerberus/schema.py', '_validate', 'schema') 6 (DL subset PT)
  PT: ["ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, None))", "ChainMap({'sub_dict': {'type': 'dict', 'schema': {'foo': {'type': 'string'}}}}, None)", 'None', 'dict']
  DL: ['dict']
57: ('/cerberus/errors.py', '_insert_error', 'field') 3 (PT Empty)
  PT: []
  DL: ['dict']
58: ('/cerberus/errors.py', '_rewrite_logic_error_path', 'rel_path') 3 (PT Empty)
  PT: []
  DL: ['dict']
59: ('/cerberus/errors.py', '_rewrite_group_error_path', 'relative_path') 3 (PT Empty)
  PT: []
  DL: ['dict']
60: ('/cerberus/utils.py', 'compare_paths_lt', 'min_length') 7 (etc)
  PT: ['int']
  DL: ['min']
61: ('/cerberus/utils.py', 'compare_paths_lt', 'a') 7 (etc)
  PT: ['str']
  DL: ['tuple']
62: ('/cerberus/utils.py', 'compare_paths_lt', 'b') 7 (etc)
  PT: ['str']
  DL: ['tuple']
63: ('/cerberus/errors.py', 'pretty_tree', 'pretty') 7 (etc)
  PT: ['None', 'dict']
  DL: ['copy.deepcopy']
64: ('/cerberus/base.py', '_error', 'field') 6 (DL subset PT)
  PT: ['dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple']
  DL: ['dict']
65: ('/cerberus/base.py', '_error', 'info') 6 (DL subset PT)
  PT: ['dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple']
  DL: ['dict']
66: ('/cerberus/base.py', '_error', 'schema_path') 8 (Partial match)
  PT: ['None', 'str', 'tuple']
  DL: ['()', 'tuple']
67: ('/cerberus/base.py', '_error', 'constraint') 6 (DL subset PT)
  PT: ['None', 'dict', 'frozenset()', "frozenset({'keysrules'})", 'list', 'str', 'tuple']
  DL: ['None', 'dict']
68: ('/cerberus/base.py', 'normalized', 'schema') 7 (etc)
  PT: ['None', 'Optional[Schema]']
  DL: ['dict']
69: ('/cerberus/base.py', 'normalized', 'document') 6 (DL subset PT)
  PT: ['dict', 'Document']
  DL: ['cerberus.typing.Document']
70: ('/cerberus/base.py', '__normalize_mapping', 'mapping') 6 (DL subset PT)
  PT: ['None', 'dict']
  DL: ['dict']
71: ('/cerberus/base.py', '__normalize_mapping', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
72: ('/cerberus/base.py', '_resolve_schema', 'schema') 7 (etc)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['str']
73: ('/cerberus/base.py', '__normalize_rename_fields', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
74: ('/cerberus/base.py', '_normalize_purge_unknown', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
75: ('/cerberus/base.py', '__normalize_purge_readonly', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
76: ('/cerberus/base.py', '__validate_readonly_fields', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
77: ('/cerberus/base.py', '__normalize_default_fields', 'fields_processing_state') 7 (etc)
  PT: ['int']
  DL: ['hash']
78: ('/cerberus/base.py', '_normalize_coerce', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
79: ('/cerberus/base.py', '_normalize_coerce', 'error') 3 (PT Empty)
  PT: []
  DL: ['ErrorDefinition']
80: ('/cerberus/base.py', '__normalize_containers', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
81: ('/cerberus/base.py', '_normalize_rename', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
82: ('/cerberus/base.py', '_normalize_rename_handler', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
83: ('/cerberus/base.py', '_normalize_default_setter', 'setter') 6 (DL subset PT)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple']
  DL: ['dict']
84: ('/cerberus/base.py', '__normalize_coerce', 'error') 3 (PT Empty)
  PT: []
  DL: ['ErrorDefinition']
85: ('/cerberus/base.py', '__normalize_coerce', 'result') 7 (etc)
  PT: ['<tempfile._TemporaryFileWrapper object at 0x7f79d6777550>', 'bool', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple']
  DL: ['value']
86: ('/cerberus/base.py', '__normalize_mapping_per_schema', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
87: ('/cerberus/base.py', '__normalize_mapping_per_schema', 'value_type') 6 (DL subset PT)
  PT: ['dict', 'str', 'tempfile._TemporaryFileWrapper', 'type']
  DL: ['type']
88: ('/cerberus/base.py', '__normalize_sequence_per_itemsrules', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
89: ('/cerberus/base.py', '__normalize_sequence_per_itemsrules', 'constraint') 6 (DL subset PT)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple']
  DL: ['dict']
90: ('/cerberus/base.py', '__normalize_sequence_per_itemsrules', 'value_type') 6 (DL subset PT)
  PT: ['dict', 'str', 'tempfile._TemporaryFileWrapper', 'type']
  DL: ['type']
91: ('/cerberus/base.py', '__normalize_sequence_per_items', 'schema') 6 (DL subset PT)
  PT: ['None', 'ValidatedSchema', 'dict', 'meta_func']
  DL: ['dict']
92: ('/cerberus/base.py', '__normalize_sequence_per_items', 'rules') 6 (DL subset PT)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple']
  DL: ['tuple']
93: ('/cerberus/base.py', '__normalize_sequence_per_items', 'values') 6 (DL subset PT)
  PT: ['<tempfile._TemporaryFileWrapper object at 0x7f79d6777550>', 'bool', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple']
  DL: ['tuple']
94: ('/cerberus/base.py', '__normalize_sequence_per_items', 'value_type') 6 (DL subset PT)
  PT: ['dict', 'str', 'tempfile._TemporaryFileWrapper', 'type']
  DL: ['type']
95: ('/cerberus/errors.py', 'fetch_errors_from', 'path') 6 (DL subset PT)
  PT: ['<tempfile._TemporaryFileWrapper object at 0x7f79d6777550>', 'None', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'DocumentPath']
  DL: ['cerberus.typing.DocumentPath']
96: ('/cerberus/errors.py', 'fetch_errors_from', 'node') 6 (DL subset PT)
  PT: ['DocumentErrorTree', 'ErrorTree']
  DL: ['DocumentErrorTree']
97: ('/cerberus/base.py', '__get_rule_handler', 'rule') 6 (DL subset PT)
  PT: ['dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple']
  DL: ['str']
98: ('/cerberus/base.py', '__get_rule_handler', 'result') 3 (PT Empty)
  PT: []
  DL: ['getattr']
99: ('/cerberus/base.py', '_get_child_validator', 'schema_crumb') 8 (Partial match)
  PT: ['None', 'str', 'tuple', 'Union[FieldName, Iterable[FieldName], None]']
  DL: ['dict', 'tuple']
100: ('/cerberus/base.py', '_get_child_validator', 'document_crumb') 6 (DL subset PT)
  PT: ['<tempfile._TemporaryFileWrapper object at 0x7f79d6777550>', 'None', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'Union[FieldName, Iterable[FieldName], None]']
  DL: ['dict', 'tuple']
101: ('/cerberus/base.py', '_get_child_validator', 'child_config') 3 (PT Empty)
  PT: []
  DL: ['collections.ChainMap']
102: ('/cerberus/base.py', '_drop_nodes_from_errorpaths', 'dp_items') 7 (etc)
  PT: ['list', 'Iterable[int]']
  DL: ['dict']
103: ('/cerberus/base.py', '_drop_nodes_from_errorpaths', 'sp_items') 7 (etc)
  PT: ['list', 'Iterable[int]']
  DL: ['dict']
104: ('/cerberus/base.py', '_drop_nodes_from_errorpaths', 'dp_basedepth') 7 (etc)
  PT: ['int']
  DL: ['len']
105: ('/cerberus/base.py', '_drop_nodes_from_errorpaths', 'sp_basedepth') 7 (etc)
  PT: ['int']
  DL: ['len']
106: ('/cerberus/errors.py', 'fetch_node_from', 'path') 6 (DL subset PT)
  PT: ['<tempfile._TemporaryFileWrapper object at 0x7f79d6777550>', 'None', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'schema'})", 'int', 'list', 'str', 'tuple', 'DocumentPath']
  DL: ['cerberus.typing.DocumentPath']
107: ('/cerberus/errors.py', 'fetch_node_from', 'context') 7 (etc)
  PT: ['DocumentErrorTree', 'ErrorTree']
  DL: ['self']
108: ('/cerberus/utils.py', 'drop_item_from_tuple', 'i') 6 (DL subset PT)
  PT: ['dict', 'int']
  DL: ['int']
109: ('/cerberus/__init__.py', 'validator_factory', 'namespace') 6 (DL subset PT)
  PT: ['None', 'dict', 'Optional[Dict]']
  DL: ['dict']
110: ('/cerberus/__init__.py', 'validator_factory', 'bases') 7 (etc)
  PT: ['None', 'Union[type, Tuple[type], None]']
  DL: ['dict']
111: ('/cerberus/__init__.py', 'validator_factory', 'computed_bases') 6 (DL subset PT)
  PT: ['None', 'tuple']
  DL: ['tuple']
112: ('/cerberus/errors.py', 'definitions_errors', 'result') 3 (PT Empty)
  PT: []
  DL: ['collections.defaultdict']
113: ('/cerberus/errors.py', 'definitions_errors', 'i') 3 (PT Empty)
  PT: []
  DL: ['dict']
114: ('/cerberus/errors.py', 'extend', 'errors') 7 (etc)
  PT: ['list', 'Iterable[ValidationError]']
  DL: ['dict']
115: ('/cerberus/base.py', 'validate', 'schema') 7 (etc)
  PT: ['None', 'Optional[Schema]']
  DL: ['dict']
116: ('/cerberus/base.py', 'validate', 'document') 6 (DL subset PT)
  PT: ['dict', 'Document']
  DL: ['cerberus.typing.Document']
117: ('/cerberus/base.py', '__validate_definitions', 'value') 6 (DL subset PT)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", 'int', 'list', 'str', 'tuple']
  DL: ['dict']
118: ('/cerberus/base.py', '__validate_unknown_fields', 'value') 6 (DL subset PT)
  PT: ['bool', 'dict', 'frozenset()', "frozenset({'coerce'})", "frozenset({'empty', 'required'})", "frozenset({'items'})", 'int', 'list', 'str', 'tuple']
  DL: ['dict']
119: ('/cerberus/errors.py', '__getitem__', 'item') 7 (etc)
  PT: ['Union[ErrorDefinition, FieldName]']
  DL: ['dict']
120: ('/cerberus/errors.py', '__call__', 'errors') 7 (etc)
  PT: ['Iterable[ValidationError]']
  DL: ['dict']
121: ('/cerberus/base.py', 'get', 'default') 7 (etc)
  PT: ['Optional[RegistryItem]']
  DL: ['dict']
122: ('/cerberus/base.py', '__get_rule_schema', 'result') 5 (PT subset DL)
  PT: ['dict']
  DL: ['dict', 'ast.literal_eval']
123: ('/cerberus/base.py', 'validated', 'schema') 7 (etc)
  PT: ['Optional[Schema]']
  DL: ['dict']
124: ('/cerberus/benchmarks/test_overall_performance.py', 'validate_documents', 'documents') 7 (etc)
  PT: ['List[dict]']
  DL: ['dict']
125: ('/cerberus/benchmarks/test_overall_performance.py', 'validate_documents', 'error_paths') 7 (etc)
  PT: ['CounterType[tuple]']
  DL: ['dict']
