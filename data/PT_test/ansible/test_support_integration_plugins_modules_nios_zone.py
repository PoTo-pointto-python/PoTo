from __future__ import absolute_import, division, print_function
__metaclass__ = type
ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'certified'}
DOCUMENTATION = '\n---\nmodule: nios_zone\nversion_added: "2.5"\nauthor: "Peter Sprygada (@privateip)"\nshort_description: Configure Infoblox NIOS DNS zones\ndescription:\n  - Adds and/or removes instances of DNS zone objects from\n    Infoblox NIOS servers.  This module manages NIOS C(zone_auth) objects\n    using the Infoblox WAPI interface over REST.\nrequirements:\n  - infoblox-client\nextends_documentation_fragment: nios\noptions:\n  fqdn:\n    description:\n      - Specifies the qualified domain name to either add or remove from\n        the NIOS instance based on the configured C(state) value.\n    required: true\n    aliases:\n      - name\n  view:\n    description:\n      - Configures the DNS view name for the configured resource.  The\n        specified DNS zone must already exist on the running NIOS instance\n        prior to configuring zones.\n    required: true\n    default: default\n    aliases:\n      - dns_view\n  grid_primary:\n    description:\n      - Configures the grid primary servers for this zone.\n    suboptions:\n      name:\n        description:\n          - The name of the grid primary server\n  grid_secondaries:\n    description:\n      - Configures the grid secondary servers for this zone.\n    suboptions:\n      name:\n        description:\n          - The name of the grid secondary server\n  ns_group:\n    version_added: "2.6"\n    description:\n      - Configures the name server group for this zone. Name server group is\n        mutually exclusive with grid primary and grid secondaries.\n  restart_if_needed:\n    version_added: "2.6"\n    description:\n      - If set to true, causes the NIOS DNS service to restart and load the\n        new zone configuration\n    type: bool\n  zone_format:\n    version_added: "2.7"\n    description:\n      - Create an authorative Reverse-Mapping Zone which is an area of network\n        space for which one or more name servers-primary and secondary-have the\n        responsibility to respond to address-to-name queries. It supports\n        reverse-mapping zones for both IPv4 and IPv6 addresses.\n    default: FORWARD\n  extattrs:\n    description:\n      - Allows for the configuration of Extensible Attributes on the\n        instance of the object.  This argument accepts a set of key / value\n        pairs for configuration.\n  comment:\n    description:\n      - Configures a text string comment to be associated with the instance\n        of this object.  The provided text string will be configured on the\n        object instance.\n  state:\n    description:\n      - Configures the intended state of the instance of the object on\n        the NIOS server.  When this value is set to C(present), the object\n        is configured on the device and when this value is set to C(absent)\n        the value is removed (if necessary) from the device.\n    default: present\n    choices:\n      - present\n      - absent\n'
EXAMPLES = '\n- name: configure a zone on the system using grid primary and secondaries\n  nios_zone:\n    name: ansible.com\n    grid_primary:\n      - name: gridprimary.grid.com\n    grid_secondaries:\n      - name: gridsecondary1.grid.com\n      - name: gridsecondary2.grid.com\n    restart_if_needed: true\n    state: present\n    provider:\n      host: "{{ inventory_hostname_short }}"\n      username: admin\n      password: admin\n  connection: local\n- name: configure a zone on the system using a name server group\n  nios_zone:\n    name: ansible.com\n    ns_group: examplensg\n    restart_if_needed: true\n    state: present\n    provider:\n      host: "{{ inventory_hostname_short }}"\n      username: admin\n      password: admin\n  connection: local\n- name: configure a reverse mapping zone on the system using IPV4 zone format\n  nios_zone:\n    name: 10.10.10.0/24\n    zone_format: IPV4\n    state: present\n    provider:\n      host: "{{ inventory_hostname_short }}"\n      username: admin\n      password: admin\n  connection: local\n- name: configure a reverse mapping zone on the system using IPV6 zone format\n  nios_zone:\n    name: 100::1/128\n    zone_format: IPV6\n    state: present\n    provider:\n      host: "{{ inventory_hostname_short }}"\n      username: admin\n      password: admin\n  connection: local\n- name: update the comment and ext attributes for an existing zone\n  nios_zone:\n    name: ansible.com\n    comment: this is an example comment\n    extattrs:\n      Site: west-dc\n    state: present\n    provider:\n      host: "{{ inventory_hostname_short }}"\n      username: admin\n      password: admin\n  connection: local\n- name: remove the dns zone\n  nios_zone:\n    name: ansible.com\n    state: absent\n    provider:\n      host: "{{ inventory_hostname_short }}"\n      username: admin\n      password: admin\n  connection: local\n- name: remove the reverse mapping dns zone from the system with IPV4 zone format\n  nios_zone:\n    name: 10.10.10.0/24\n    zone_format: IPV4\n    state: absent\n    provider:\n      host: "{{ inventory_hostname_short }}"\n      username: admin\n      password: admin\n  connection: local\n'
RETURN = ' # '
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.net_tools.nios.api import WapiModule
from ansible.module_utils.net_tools.nios.api import NIOS_ZONE

def main():
    """ Main entry point for module execution
    """
    grid_spec = dict(name=dict(required=True))
    ib_spec = dict(fqdn=dict(required=True, aliases=['name'], ib_req=True, update=False), zone_format=dict(default='FORWARD', aliases=['zone_format'], ib_req=False), view=dict(default='default', aliases=['dns_view'], ib_req=True), grid_primary=dict(type='list', elements='dict', options=grid_spec), grid_secondaries=dict(type='list', elements='dict', options=grid_spec), ns_group=dict(), restart_if_needed=dict(type='bool'), extattrs=dict(type='dict'), comment=dict())
    argument_spec = dict(provider=dict(required=True), state=dict(default='present', choices=['present', 'absent']))
    argument_spec.update(ib_spec)
    argument_spec.update(WapiModule.provider_spec)
    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True, mutually_exclusive=[['ns_group', 'grid_primary'], ['ns_group', 'grid_secondaries']])
    wapi = WapiModule(module)
    result = wapi.run(NIOS_ZONE, ib_spec)
    module.exit_json(**result)
if __name__ == '__main__':
    main()