from __future__ import absolute_import, division, print_function
__metaclass__ = type
ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community'}
DOCUMENTATION = '\n\nmodule: k8s\n\nshort_description: Manage Kubernetes (K8s) objects\n\nversion_added: "2.6"\n\nauthor:\n    - "Chris Houseknecht (@chouseknecht)"\n    - "Fabian von Feilitzsch (@fabianvf)"\n\ndescription:\n  - Use the OpenShift Python client to perform CRUD operations on K8s objects.\n  - Pass the object definition from a source file or inline. See examples for reading\n    files and using Jinja templates or vault-encrypted files.\n  - Access to the full range of K8s APIs.\n  - Use the M(k8s_info) module to obtain a list of items about an object of type C(kind)\n  - Authenticate using either a config file, certificates, password or token.\n  - Supports check mode.\n\nextends_documentation_fragment:\n  - k8s_state_options\n  - k8s_name_options\n  - k8s_resource_options\n  - k8s_auth_options\n\nnotes:\n  - If your OpenShift Python library is not 0.9.0 or newer and you are trying to\n    remove an item from an associative array/dictionary, for example a label or\n    an annotation, you will need to explicitly set the value of the item to be\n    removed to `null`. Simply deleting the entry in the dictionary will not\n    remove it from openshift or kubernetes.\n\noptions:\n  merge_type:\n    description:\n    - Whether to override the default patch merge approach with a specific type. By default, the strategic\n      merge will typically be used.\n    - For example, Custom Resource Definitions typically aren\'t updatable by the usual strategic merge. You may\n      want to use C(merge) if you see "strategic merge patch format is not supported"\n    - See U(https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment)\n    - Requires openshift >= 0.6.2\n    - If more than one merge_type is given, the merge_types will be tried in order\n    - If openshift >= 0.6.2, this defaults to C([\'strategic-merge\', \'merge\']), which is ideal for using the same parameters\n      on resource kinds that combine Custom Resources and built-in resources. For openshift < 0.6.2, the default\n      is simply C(strategic-merge).\n    - mutually exclusive with C(apply)\n    choices:\n    - json\n    - merge\n    - strategic-merge\n    type: list\n    version_added: "2.7"\n  wait:\n    description:\n    - Whether to wait for certain resource kinds to end up in the desired state. By default the module exits once Kubernetes has\n      received the request\n    - Implemented for C(state=present) for C(Deployment), C(DaemonSet) and C(Pod), and for C(state=absent) for all resource kinds.\n    - For resource kinds without an implementation, C(wait) returns immediately unless C(wait_condition) is set.\n    default: no\n    type: bool\n    version_added: "2.8"\n  wait_sleep:\n    description:\n    - Number of seconds to sleep between checks.\n    default: 5\n    version_added: "2.9"\n  wait_timeout:\n    description:\n    - How long in seconds to wait for the resource to end up in the desired state. Ignored if C(wait) is not set.\n    default: 120\n    version_added: "2.8"\n  wait_condition:\n    description:\n    - Specifies a custom condition on the status to wait for. Ignored if C(wait) is not set or is set to False.\n    suboptions:\n      type:\n        description:\n        - The type of condition to wait for. For example, the C(Pod) resource will set the C(Ready) condition (among others)\n        - Required if you are specifying a C(wait_condition). If left empty, the C(wait_condition) field will be ignored.\n        - The possible types for a condition are specific to each resource type in Kubernetes. See the API documentation of the status field\n          for a given resource to see possible choices.\n      status:\n        description:\n        - The value of the status field in your desired condition.\n        - For example, if a C(Deployment) is paused, the C(Progressing) C(type) will have the C(Unknown) status.\n        choices:\n        - True\n        - False\n        - Unknown\n      reason:\n        description:\n        - The value of the reason field in your desired condition\n        - For example, if a C(Deployment) is paused, The C(Progressing) C(type) will have the C(DeploymentPaused) reason.\n        - The possible reasons in a condition are specific to each resource type in Kubernetes. See the API documentation of the status field\n          for a given resource to see possible choices.\n    version_added: "2.8"\n  validate:\n    description:\n      - how (if at all) to validate the resource definition against the kubernetes schema.\n        Requires the kubernetes-validate python module\n    suboptions:\n      fail_on_error:\n        description: whether to fail on validation errors.\n        required: yes\n        type: bool\n      version:\n        description: version of Kubernetes to validate against. defaults to Kubernetes server version\n      strict:\n        description: whether to fail when passing unexpected properties\n        default: no\n        type: bool\n    version_added: "2.8"\n  append_hash:\n    description:\n    - Whether to append a hash to a resource name for immutability purposes\n    - Applies only to ConfigMap and Secret resources\n    - The parameter will be silently ignored for other resource kinds\n    - The full definition of an object is needed to generate the hash - this means that deleting an object created with append_hash\n      will only work if the same object is passed with state=absent (alternatively, just use state=absent with the name including\n      the generated hash and append_hash=no)\n    type: bool\n    version_added: "2.8"\n  apply:\n    description:\n    - C(apply) compares the desired resource definition with the previously supplied resource definition,\n      ignoring properties that are automatically generated\n    - C(apply) works better with Services than \'force=yes\'\n    - mutually exclusive with C(merge_type)\n    type: bool\n    version_added: "2.9"\n\nrequirements:\n  - "python >= 2.7"\n  - "openshift >= 0.6"\n  - "PyYAML >= 3.11"\n'
EXAMPLES = '\n- name: Create a k8s namespace\n  k8s:\n    name: testing\n    api_version: v1\n    kind: Namespace\n    state: present\n\n- name: Create a Service object from an inline definition\n  k8s:\n    state: present\n    definition:\n      apiVersion: v1\n      kind: Service\n      metadata:\n        name: web\n        namespace: testing\n        labels:\n          app: galaxy\n          service: web\n      spec:\n        selector:\n          app: galaxy\n          service: web\n        ports:\n        - protocol: TCP\n          targetPort: 8000\n          name: port-8000-tcp\n          port: 8000\n\n- name: Remove an existing Service object\n  k8s:\n    state: absent\n    api_version: v1\n    kind: Service\n    namespace: testing\n    name: web\n\n# Passing the object definition from a file\n\n- name: Create a Deployment by reading the definition from a local file\n  k8s:\n    state: present\n    src: /testing/deployment.yml\n\n- name: >-\n    Read definition file from the Ansible controller file system.\n    If the definition file has been encrypted with Ansible Vault it will automatically be decrypted.\n  k8s:\n    state: present\n    definition: "{{ lookup(\'file\', \'/testing/deployment.yml\') | from_yaml }}"\n\n- name: Read definition file from the Ansible controller file system after Jinja templating\n  k8s:\n    state: present\n    definition: "{{ lookup(\'template\', \'/testing/deployment.yml\') | from_yaml }}"\n\n- name: fail on validation errors\n  k8s:\n    state: present\n    definition: "{{ lookup(\'template\', \'/testing/deployment.yml\')  | from_yaml }}"\n    validate:\n      fail_on_error: yes\n\n- name: warn on validation errors, check for unexpected properties\n  k8s:\n    state: present\n    definition: "{{ lookup(\'template\', \'/testing/deployment.yml\') | from_yaml }}"\n    validate:\n      fail_on_error: no\n      strict: yes\n'
RETURN = '\nresult:\n  description:\n  - The created, patched, or otherwise present object. Will be empty in the case of a deletion.\n  returned: success\n  type: complex\n  contains:\n     api_version:\n       description: The versioned schema of this representation of an object.\n       returned: success\n       type: str\n     kind:\n       description: Represents the REST resource this object represents.\n       returned: success\n       type: str\n     metadata:\n       description: Standard object metadata. Includes name, namespace, annotations, labels, etc.\n       returned: success\n       type: complex\n     spec:\n       description: Specific attributes of the object. Will vary based on the I(api_version) and I(kind).\n       returned: success\n       type: complex\n     status:\n       description: Current status details for the object.\n       returned: success\n       type: complex\n     items:\n       description: Returned only when multiple yaml documents are passed to src or resource_definition\n       returned: when resource_definition or src contains list of objects\n       type: list\n     duration:\n       description: elapsed time of task in seconds\n       returned: when C(wait) is true\n       type: int\n       sample: 48\n'
from ansible.module_utils.k8s.raw import KubernetesRawModule

def main():
    KubernetesRawModule().execute_module()
if __name__ == '__main__':
    main()